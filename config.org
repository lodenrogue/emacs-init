* Evil Leader (This must come before evil)
** Install
#+begin_src emacs-lisp
  (require 'evil-leader)
  (global-evil-leader-mode 1)
#+end_src
** Set Leader Key
#+begin_src emacs-lisp
  (evil-leader/set-leader "<SPC>")
#+end_src

* App
** Open emacs in full screen
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src
** Remove menu and tool bar
#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
#+end_src
** Quit
#+begin_src emacs-lisp
  (evil-leader/set-key
    "q q" 'save-buffers-kill-terminal)
#+end_src
* Theme
** Install
#+begin_src emacs-lisp
  (require 'doom-themes)
#+end_src
** Activate theme
#+begin_src emacs-lisp
  (load-theme 'doom-dracula :no-confirm)
#+end_src
** Bold and Italics
#+begin_src emacs-lisp
  (setq doom-themes-enable-bold t
	doom-themes-enable-italic t)
#+end_src
** Enable flashing mode-line on errors
#+begin_src emacs-lisp
  (doom-themes-visual-bell-config)
#+end_src
* Modeline
Install Nerd Fonts first from terminal
#+begin_src bash
  brew tap homebrew/cask-fonts
  brew install --cask font-symbols-only-nerd-font
#+end_src
** Install Nerd Fonts
#+begin_src emacs-lisp
  (require 'nerd-icons)
#+end_src
** Install Doom Modeline
#+begin_src emacs-lisp
  (require 'doom-modeline)
  (doom-modeline-mode 1)
#+end_src
* Font Size
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 150)
#+end_src
* Line Numbers
#+begin_src emacs-lisp
  (setq-default display-line-numbers-type 'relative)
  (global-display-line-numbers-mode 1)
#+end_src
* Rainbow Delimiters
#+begin_src emacs-lisp
  (require 'rainbow-delimiters)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src
* File
** Don't create backup files
#+begin_src emacs-lisp
  (setq-default make-backup-files nil)
  (auto-save-mode -1)
#+end_src
** Recent files
*** Configure recent files
#+begin_src emacs-lisp
  (require 'recentf)

  (recentf-mode 1)

  (setq recentf-max-menu-items 25)
#+end_src
*** Ignore files
#+begin_src emacs-lisp
  (add-to-list 'recentf-exclude
	       (recentf-expand-file-name "~/.elfeed/index"))
#+end_src
** Key Bindings
*** Open Init File
#+begin_src emacs-lisp
  (defun my/open-init-file ()
    "Open init.el file."
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (evil-leader/set-key
    "f i" 'my/open-init-file)
#+end_src
*** Find File
#+begin_src emacs-lisp
  (evil-leader/set-key
    "f f" 'find-file
    "f r" 'consult-recent-file)
#+end_src
* Buffer
** Key Bindings
#+begin_src emacs-lisp
  (evil-leader/set-key
    "b b" 'consult-buffer
    "b i" 'ibuffer
    "b n" 'next-buffer
    "<right>" 'next-buffer
    "b p" 'previous-buffer
    "<left>" 'previous-buffer
    "b k" 'kill-buffer)
#+end_src
** Search Buffer
#+begin_src emacs-lisp
  (evil-leader/set-key
    "/" 'consult-line)
#+end_src
* Window
** Key Bindings
#+begin_src emacs-lisp
  (evil-leader/set-key
    "w 1" 'delete-other-windows
    "w k" 'delete-window
    "w h" (lambda () (interactive) (split-window-below) (other-window 1))
    "w v" (lambda () (interactive) (split-window-right) (other-window 1))
    "w w" 'ace-window) ;; Switch between windows
#+end_src
* Workspaces
** Install Perspective
#+begin_src emacs-lisp
  (require 'perspective)

  (global-set-key (kbd "C-x C-b") 'persp-list-buffers)

  (customize-set-variable 'persp-mode-prefix-key (kbd "C-c M-p"))

  (persp-mode 1)
#+end_src

** Show buffers grouped by perspective
#+begin_src emacs-lisp
  (add-hook 'ibuffer-hook
	    (lambda ()
	      (persp-ibuffer-set-filter-groups)
	      (unless (eq ibuffer-sorting-mode 'alphabetic)
		(ibuffer-do-sort-by-alphabetic))))
#+end_src
** Key Bindings
#+begin_src emacs-lisp
  (defun my/switch-workspace-1 () "Switch to workspace 1" (interactive) (persp-switch-by-number 1))
  (defun my/switch-workspace-2 () "Switch to workspace 2" (interactive) (persp-switch-by-number 2))
  (defun my/switch-workspace-3 () "Switch to workspace 3" (interactive) (persp-switch-by-number 3))
  (defun my/switch-workspace-4 () "Switch to workspace 4" (interactive) (persp-switch-by-number 4))
  (defun my/switch-workspace-5 () "Switch to workspace 5" (interactive) (persp-switch-by-number 5))
  (defun my/switch-workspace-6 () "Switch to workspace 6" (interactive) (persp-switch-by-number 6))
  (defun my/switch-workspace-7 () "Switch to workspace 7" (interactive) (persp-switch-by-number 7))
  (defun my/switch-workspace-8 () "Switch to workspace 8" (interactive) (persp-switch-by-number 8))
  (defun my/switch-workspace-9 () "Switch to workspace 9" (interactive) (persp-switch-by-number 9))
  (defun my/switch-workspace-10 () "Switch to workspace 10" (interactive) (persp-switch-by-number 10))

  (evil-leader/set-key
    "p s" 'persp-switch
    "p S" 'persp-state-save
    "p l" 'persp-state-load
    "p n" 'persp-next
    "p p" 'persp-prev
    "p k" 'persp-kill
    "p 1" 'my/switch-workspace-1
    "p 2" 'my/switch-workspace-2
    "p 3" 'my/switch-workspace-3
    "p 4" 'my/switch-workspace-4
    "p 5" 'my/switch-workspace-5
    "p 6" 'my/switch-workspace-6
    "p 7" 'my/switch-workspace-7
    "p 8" 'my/switch-workspace-8
    "p 9" 'my/switch-workspace-9
    "p 0" 'my/switch-workspace-10)
#+end_src

* Minibuffer
** Keybinding
Paste in the minibuffer
#+begin_src emacs-lisp
  (define-key minibuffer-local-map (kbd "M-v") 'yank)
#+end_src
* Spelling
#+begin_src emacs-lisp
  (setq ispell-program-name "/opt/homebrew/bin/aspell")

  (evil-leader/set-key
    "s c" 'ispell)
#+end_src
* Help
** Select Help Window When Opening
#+begin_src emacs-lisp
  (setq-default help-window-select t)
#+end_src
** Key Bindings
#+begin_src emacs-lisp
  (evil-leader/set-key
    "h f" 'describe-function
    "h k" 'describe-key
    "h v" 'describe-variable
    "h b" 'describe-bindings
    "h m" 'describe-mode)
#+end_src
* Software
** Key Bindings
#+begin_src emacs-lisp
  (defun my/upgrade ()
    "Upgrade packages and remove packages that are no longer needed"
    (interactive)
    (package-upgrade-all)
    (package-autoremove))

  (evil-leader/set-key
    "s u" 'my/upgrade)
#+end_src
* Org Mode
** Opening org files
*** Open any .org file in org mode
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
#+end_src
*** Open org files with accordians folded
#+begin_src emacs-lisp
  (setq org-startup-folded t)
#+end_src
** Bullets
#+begin_src emacs-lisp
  (require 'org-bullets)

  (add-hook 'org-mode-hook
	    (lambda () (org-bullets-mode 1)))
#+end_src

** Source blocks
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** Key Bindings
**** Open link in browser
#+begin_src emacs-lisp
  (evil-leader/set-key
    "o l" 'org-open-at-point)
#+end_src
* Abbreviations
** Python
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'abbrev-mode)

  (define-abbrev-table 'python-mode-abbrev-table
    '(("ifnem" "if __name__ == \"__main__\":")
      ("dinit" "def __init__(self):")))

  (setq save-abbrevs nil)
#+end_src
* Autocomplete
** Install Company
#+begin_src emacs-lisp
  (require 'company)

  (add-hook 'after-init-hook 'global-company-mode)
#+end_src
* RSS Reader
** Install Elfeed
#+begin_src emacs-lisp
  (require 'elfeed)
#+end_src
** Feeds
#+begin_src emacs-lisp
  (setq elfeed-feeds
	'("https://protesilaos.com/master.xml"
	  "https://hnrss.org/frontpage"))

  (elfeed-update)
#+end_src
* Terminal
** Key Bindings
#+begin_src emacs-lisp
  (defun my/create-shell ()
    "Create a shell buffer with a unique name."
    (interactive)
    (term "/bin/zsh"))

  (defun my/create-small-shell ()
    "Create a shell buffer in a window below current buffer."
    (interactive)
    (split-window-below)
    (other-window 1)
    (my/create-shell))

  (evil-leader/set-key
    "t s" 'my/create-small-shell
    "t t" 'my/create-shell)
#+end_src
* Web
** Key Bindings
*** Search Google
Search google for selected text
#+begin_src emacs-lisp
  (defun my/grab-selected-text ()
    "Grab the text selected in visual mode and return it as a string."
    (interactive)
    (when (region-active-p)
      (let ((start (region-beginning))
	    (end (region-end)))
	(buffer-substring-no-properties start end))))

  (defun my/google-search ()
    "Use google search on selected text"
    (interactive)
    (let ((selected-text (my/grab-selected-text)))
      (if selected-text
	(browse-url (format "https://google.com/search?q=%s" (url-hexify-string selected-text)))
	(error "Error: No text selected to search"))))

  (evil-leader/set-key
    "g s" 'my/google-search)
#+end_src
* Programming
** Key Bindings
*** Toggle View Code Block
#+begin_src emacs-lisp
  (defun my/toggle-view-code-block()
    "Toggle narrowing on code block"
    (interactive)
    (if (buffer-narrowed-p)
	(widen)
    (narrow-to-defun)))

  (evil-leader/set-key
    "c v" 'my/toggle-view-code-block)
#+end_src
*** Python
#+begin_src emacs-lisp
  (defun my/run-file-as-python ()
    "Run the current file as a python script"
    (interactive)
    (let ((python-file-buffer-name (buffer-file-name))
	  (python-script-arguments (read-string "Arguments: ")))
      (shell-command (concat "python3 " python-file-buffer-name " " python-script-arguments) "*Python Output*")))

  (evil-leader/set-key-for-mode 'python-mode
    "r p" 'my/run-file-as-python)
#+end_src
*** Bash
#+begin_src emacs-lisp
  (defun my/run-file-as-bash ()
    "Run the current file as a bash script"
    (interactive)
    (let ((bash-file-buffer-name (buffer-file-name))
	  (bash-script-arguments (read-string "Arguments: ")))
      (shell-command (concat "export PATH=$PATH:~/bin && bash " bash-file-buffer-name " " bash-script-arguments) "*Bash Output*")))

  (evil-leader/set-key-for-mode 'sh-mode
    "r b" 'my/run-file-as-bash)
#+end_src

* Roleplaying
** Tools
#+begin_src emacs-lisp
  (load-file "~/.emacs.d/dnd.el")

  (evil-leader/set-key
    "d n" 'dnd/npc
    "d u" 'dnd/urban
    "d k" 'dnd/keywords
    "d r" 'dnd/roll
    "d o" 'dnd/oracle
    "d e" 'dnd/event
    "d c" 'dnd/combat)
#+end_src
* Fuzzy Matching
** Install
#+begin_src emacs-lisp
  (require 'orderless)
  (setq completion-styles '(orderless basic)
	completion-category-overrides '((file (styles basic partial-completion))))
#+end_src
* Consult (Completions with Previews)
** Install
#+begin_src emacs-lisp
  (require 'consult)
#+end_src
* Evil Mode
** Install
#+begin_src emacs-lisp
  (setq evil-want-C-i-jump nil)

  (require 'evil)

  (evil-mode 1)
#+end_src

** Activate redo
#+begin_src emacs-lisp
  (evil-set-undo-system 'undo-redo)
#+end_src
** Key bindings
*** Scrolling up
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
#+end_src
*** Save file
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "ZS") (lambda () (interactive) (save-buffer)))
#+end_src
*** Open org accordians
#+begin_src emacs-lisp
  (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
#+end_src

*** Paste
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "M-v") 'yank)
  (define-key evil-insert-state-map (kbd "M-v") 'yank)
#+end_src

*** Elfeed
#+begin_src emacs-lisp
  (evil-define-key 'normal elfeed-search-mode-map (kbd "u") #'elfeed-search-tag-all-unread)
  (evil-define-key 'normal elfeed-search-mode-map (kbd "r") #'elfeed-search-untag-all-unread)
  (evil-define-key 'normal elfeed-search-mode-map (kbd "q") #'elfeed-kill-buffer)
  (evil-define-key 'normal elfeed-search-mode-map (kbd "<RET>") #'elfeed-search-show-entry) 

  (evil-define-key 'normal elfeed-show-mode-map (kbd "q") #'elfeed-kill-buffer)
  (evil-define-key 'normal elfeed-show-mode-map (kbd "<tab>") #'elfeed-show-next-link)
#+end_src
* Which Key (Key Binding Suggestions)
#+begin_src emacs-lisp
  (require 'which-key)
  (which-key-mode 1)
#+end_src
* Vertico (List Suggestions)
** Install
#+begin_src emacs-lisp
  (require 'vertico)
  (vertico-mode 1)
#+end_src
** Cycle results
#+begin_src emacs-lisp
  (setq vertico-cycle 1)
#+end_src
* Marginalia (Suggestion Hints)
#+begin_src emacs-lisp
  (require 'marginalia)
  (marginalia-mode 1)
#+end_src
