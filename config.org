* Export to html
Put this at the top of the file: #+SETUPFILE: ~/.emacs.d/ rg-html-themes/org/theme-readtheorg.setup
You can download theme from [[https://github.com/fniessen/org-html-themes][here]]
* Load Common Functions
#+begin_src emacs-lisp
  (load-file "~/.emacs.d/common-functions.el")
#+end_src
* Evil Leader (This must come before evil)
** Install
#+begin_src emacs-lisp
  (setq evil-want-keybinding nil)

  (unless (package-installed-p 'evil-leader)
    (package-install 'evil-leader))

  (require 'evil-leader)

  (global-evil-leader-mode 1)
#+end_src
** Set Leader Key
#+begin_src emacs-lisp
  (evil-leader/set-leader "<SPC>")
#+end_src
* App
** Open emacs in full screen
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src
** Remove menu and tool bar
#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
#+end_src
** Quit
#+begin_src emacs-lisp
  (evil-leader/set-key
    "q q" 'save-buffers-kill-terminal)
#+end_src
* Theme
** Install
#+begin_src emacs-lisp
  (unless (package-installed-p 'doom-themes)
    (package-install 'doom-themes))

  (require 'doom-themes)
#+end_src
** Activate theme
#+begin_src emacs-lisp
  (load-theme 'doom-dracula :no-confirm)
#+end_src
** Bold and Italics
#+begin_src emacs-lisp
  (setq doom-themes-enable-bold t
	doom-themes-enable-italic t)
#+end_src
** Enable flashing mode-line on errors
#+begin_src emacs-lisp
  (doom-themes-visual-bell-config)
#+end_src
* Modeline
Install Nerd Fonts first from terminal
#+begin_src bash
  brew tap homebrew/cask-fonts
  brew install --cask font-symbols-only-nerd-font
#+end_src
** Install Nerd Fonts
#+begin_src emacs-lisp
  (unless (package-installed-p 'nerd-icons)
    (package-install 'nerd-icons))

  (require 'nerd-icons)
#+end_src
** Install Doom Modeline
#+begin_src emacs-lisp
  (unless (package-installed-p 'doom-modeline)
    (package-install 'doom-modeline))

  (require 'doom-modeline)
  (doom-modeline-mode 1)
#+end_src
* Font Size
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 150)
#+end_src
* Line Numbers
#+begin_src emacs-lisp
  (setq-default display-line-numbers-type 'visual)
  (global-display-line-numbers-mode 1)
#+end_src
* Smartparens
#+begin_src emacs-lisp
;;  (unless (package-installed-p 'smartparens)
;;    (package-install 'smartparens))
;;
;;  (require 'smartparens-config)
;;  (smartparens-global-mode t)
#+end_src
* Rainbow Delimiters
#+begin_src emacs-lisp
  (unless (package-installed-p 'rainbow-delimiters)
    (package-install 'rainbow-delimiters))

  (require 'rainbow-delimiters)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src
* File
** Don't create backup files
#+begin_src emacs-lisp
  (setq-default make-backup-files nil)
  (auto-save-mode -1)
#+end_src
** Recent files
*** Configure recent files
#+begin_src emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 50)
#+end_src
*** Ignore files
#+begin_src emacs-lisp
  (add-to-list 'recentf-exclude
	       (recentf-expand-file-name "~/.elfeed/index"))
#+end_src
** File tree
*** Install
#+begin_src emacs-lisp
  (unless (package-installed-p 'neotree)
    (package-install 'neotree))

  (require 'neotree)

  (setq-default neo-show-hidden-files t)
#+end_src
*** Keybindings
#+begin_src emacs-lisp
  (defun my/toggle-file-tree ()
    "Toggle show the file tree"
    (interactive)
    (if (neo-global--window-exists-p)
	(neotree-hide)
      (neotree-dir default-directory)))

  (evil-leader/set-key
    "f t" 'my/toggle-file-tree)
#+end_src
** Key Bindings
*** Open Init File
#+begin_src emacs-lisp
  (defun my/open-init-file ()
    "Open init.el file."
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (evil-leader/set-key
    "f i" 'my/open-init-file)
#+end_src
*** Find File
#+begin_src emacs-lisp
  (evil-leader/set-key
    "f f" 'find-file
    "f r" 'consult-recent-file)
#+end_src
* Buffer
** Search Buffer
#+begin_src emacs-lisp
  (evil-leader/set-key
    "/" 'consult-line)
#+end_src
** Jump to text
#+begin_src emacs-lisp
  (unless (package-installed-p 'avy)
    (package-install 'avy))

  (require 'avy)

  (evil-leader/set-key
    ";" 'avy-goto-char)
#+end_src
** Autoload changes when file edited outside emacs
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src
** Key Bindings
#+begin_src emacs-lisp
  (evil-leader/set-key
    "b b" 'consult-buffer
    "b i" 'ibuffer
    "b n" 'next-buffer
    "<right>" 'next-buffer
    "b p" 'previous-buffer
    "<left>" 'previous-buffer
    "b k" 'kill-current-buffer)
#+end_src
* Window
** Install Ace Window
#+begin_src emacs-lisp
  (unless (package-installed-p 'ace-window)
    (package-install 'ace-window))

#+end_src
** Key Bindings
#+begin_src emacs-lisp
  (evil-leader/set-key
    "w 1" 'delete-other-windows
    "w k" 'delete-window
    "w h" (lambda () (interactive) (split-window-below) (other-window 1))
    "w v" (lambda () (interactive) (split-window-right) (other-window 1))
    "w s" 'ace-swap-window
    "w w" 'ace-window) ;; Switch between windows
#+end_src
* Workspaces
** Install Perspective
#+begin_src emacs-lisp
  (unless (package-installed-p 'perspective)
    (package-install 'perspective))

  (require 'perspective)

  (global-set-key (kbd "C-x C-b") 'persp-list-buffers)

  (customize-set-variable 'persp-mode-prefix-key (kbd "C-c M-p"))

  (persp-mode 1)
#+end_src

** Show buffers grouped by perspective
#+begin_src emacs-lisp
  (add-hook 'ibuffer-hook
	    (lambda ()
	      (persp-ibuffer-set-filter-groups)
	      (unless (eq ibuffer-sorting-mode 'alphabetic)
		(ibuffer-do-sort-by-alphabetic))))
#+end_src
** Key Bindings
#+begin_src emacs-lisp
  (defun my/switch-workspace-1 () "Switch to workspace 1" (interactive) (persp-switch-by-number 1))
  (defun my/switch-workspace-2 () "Switch to workspace 2" (interactive) (persp-switch-by-number 2))
  (defun my/switch-workspace-3 () "Switch to workspace 3" (interactive) (persp-switch-by-number 3))
  (defun my/switch-workspace-4 () "Switch to workspace 4" (interactive) (persp-switch-by-number 4))
  (defun my/switch-workspace-5 () "Switch to workspace 5" (interactive) (persp-switch-by-number 5))
  (defun my/switch-workspace-6 () "Switch to workspace 6" (interactive) (persp-switch-by-number 6))
  (defun my/switch-workspace-7 () "Switch to workspace 7" (interactive) (persp-switch-by-number 7))
  (defun my/switch-workspace-8 () "Switch to workspace 8" (interactive) (persp-switch-by-number 8))
  (defun my/switch-workspace-9 () "Switch to workspace 9" (interactive) (persp-switch-by-number 9))
  (defun my/switch-workspace-10 () "Switch to workspace 10" (interactive) (persp-switch-by-number 10))

  (evil-leader/set-key
    "p s" 'persp-switch
    "p S" 'persp-state-save
    "p l" 'persp-state-load
    "p n" 'persp-next
    "p p" 'persp-prev
    "p k" 'persp-kill
    "p 1" 'my/switch-workspace-1
    "p 2" 'my/switch-workspace-2
    "p 3" 'my/switch-workspace-3
    "p 4" 'my/switch-workspace-4
    "p 5" 'my/switch-workspace-5
    "p 6" 'my/switch-workspace-6
    "p 7" 'my/switch-workspace-7
    "p 8" 'my/switch-workspace-8
    "p 9" 'my/switch-workspace-9
    "p 0" 'my/switch-workspace-10)
#+end_src
* Minibuffer
** Keybinding
*** Paste
Paste in the minibuffer
#+begin_src emacs-lisp
  (define-key minibuffer-local-map (kbd "M-v") 'yank)
#+end_src
*** Exit minibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
* Registers
** View register contents
#+begin_src emacs-lisp
  (evil-leader/set-key
    "r v" 'view-register)
#+end_src
** Text
#+begin_src emacs-lisp
  (evil-leader/set-key
    "r s t" 'copy-to-register
    "r a t" 'append-to-register
    "r p t" 'prepend-to-register
    "r i t" 'insert-register)
#+end_src
** Rectangles
#+begin_src emacs-lisp
  (evil-leader/set-key
    "r s r" 'copy-rectangle-to-register
    "r i r" 'insert-register)
#+end_src
** Files
#+begin_src emacs-lisp
  (defun my/register-save-file ()
    "Save file name to given register"
    (interactive)
    (if (buffer-file-name)
	(let ((register (read-char "Copy to register: ")))
	  (set-register register `(file . ,(buffer-file-name))))
      (error "Error: Not currently visiting a file")))

  (evil-leader/set-key
    "r s f" 'my/register-save-file
    "r j f" 'jump-to-register)
#+end_src
** Buffer
#+begin_src emacs-lisp
  (defun my/register-save-buffer ()
    "Save file name to given register"
    (interactive)
    (let ((register (read-char "Copy to register: ")))
      (set-register register `(buffer . ,(buffer-name)))))

  (evil-leader/set-key
    "r s b" 'my/register-save-buffer
    "r j b" 'jump-to-register)
#+end_src
** Buffer positions
#+begin_src emacs-lisp
  (evil-leader/set-key
    "r s p" 'point-to-register
    "r j p" 'jump-to-register)
#+end_src
** Window
#+begin_src emacs-lisp
  (evil-leader/set-key
    "r s w" 'window-configuration-to-register
    "r l w" 'jump-to-register) ;; (r)egister (l)oad (w)indow
#+end_src
* Spelling
#+begin_src emacs-lisp
  (setq ispell-program-name "/opt/homebrew/bin/aspell")

  (evil-leader/set-key
    "s c" 'ispell)
#+end_src
* Help
** Select Help Window When Opening
#+begin_src emacs-lisp
  (setq-default help-window-select t)
#+end_src
** Key Bindings
#+begin_src emacs-lisp
  (evil-leader/set-key
    "h f" 'describe-function
    "h k" 'describe-key
    "h v" 'describe-variable
    "h b" 'describe-bindings
    "h m" 'describe-mode)
#+end_src
* Software
** Key Bindings
#+begin_src emacs-lisp
  (defun my/upgrade ()
    "Upgrade packages and remove packages that are no longer needed"
    (interactive)
    (package-upgrade-all)
    (package-autoremove))

  (evil-leader/set-key
    "s u" 'my/upgrade)
#+end_src
* Org Mode
** Opening org files
*** Open any .org file in org mode
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
#+end_src
*** Open org files with accordians folded
#+begin_src emacs-lisp
  (setq org-startup-folded t)
#+end_src
** Bullets
#+begin_src emacs-lisp
  (unless (package-installed-p 'org-bullets)
    (package-install 'org-bullets))

  (require 'org-bullets)

  (add-hook 'org-mode-hook
	    (lambda () (org-bullets-mode 1)))
#+end_src
** Indent text in sections
#+begin_src emacs-lisp
  (setq org-startup-indented t)
#+end_src
** Empty lines between headings
#+begin_src emacs-lisp
  ;;(setq org-cycle-separator-lines -1)
#+end_src
** Source blocks
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src
** Open links
#+begin_src emacs-lisp
  (setq org-return-follows-link t)
  (setf (cdr (assoc 'file org-link-frame-setup)) 'find-file)
#+end_src
** Org agenda
*** Open org agenda
#+begin_src emacs-lisp
  (evil-leader/set-key
    "a a" 'org-agenda)
#+end_src
*** Add file to org agenda
#+begin_src emacs-lisp
  (evil-leader/set-key-for-mode 'org-mode
   "a f" 'org-agenda-file-to-front)
#+end_src
*** Add item to schedule
#+begin_src emacs-lisp
  (evil-leader/set-key
    "o s" 'org-schedule)
#+end_src
** Org capture
*** Templates
More info on capture templates [[https://orgmode.org/manual/Capture-templates.html][here]]
#+begin_src emacs-lisp
  (setq org-capture-templates
	'(("i" "Inbox" entry (file+headline "~/gtd/inbox.org" "Inbox")
	   "* TODO %?")))
#+end_src
*** Keybindings
#+begin_src emacs-lisp
  (evil-leader/set-key
    "o c" 'org-capture)
#+end_src
** Org reveal
#+begin_src emacs-lisp
  (unless (package-installed-p 'ox-reveal)
    (package-install 'ox-reveal))

  (require 'ox-reveal)
#+end_src
** Org roam
*** Install
#+begin_src emacs-lisp
  (unless (package-installed-p 'org-roam)
    (package-install 'org-roam))

  (require 'org-roam)

  (setq org-roam-directory (file-truename "~/roam"))

  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))

  (org-roam-db-autosync-mode)
#+end_src
*** Node completions
#+begin_src emacs-lisp
  (setq org-roam-completion-everywhere t)
#+end_src
*** Keybindings
#+begin_src emacs-lisp
  (evil-leader/set-key
    "n f" 'org-roam-node-find
    "n i" 'org-roam-node-insert)
#+end_src
*** Org roam UI
#+begin_src emacs-lisp
  (unless (package-installed-p 'org-roam-ui)
    (package-install 'org-roam-ui))

  (require 'org-roam-ui)

  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t)
#+end_src
** Workflow states (TODO, etc)
*** States
#+begin_src emacs-lisp
  (setq org-todo-keywords
	'((sequence "PROJ" "TODO" "NEXT" "IN PROGRESS" "SCHEDULED" "DELEGATED" "WAITING" "|" "DONE")))
#+end_src
*** Colors
#+begin_src emacs-lisp
  (setq org-todo-keyword-faces
	'(("PROJ" . "#50AEEF")
	  ("NEXT" . "#50FA7B")
	  ("IN PROGRESS" . "#50FA7B")
	  ("DELEGATED" . "#50FA7B")
	  ("DONE" . "#6272a4")
	  ("WAITING" . "#FF5555")))
#+end_src
** Add timestamp when task done
#+begin_src emacs-lisp
  (setq org-log-done 'time)
#+end_src
** Archive
Archive the current org node
#+begin_src emacs-lisp
  (evil-leader/set-key
    "o a" 'org-archive-subtree-default)
#+end_src
** Key Bindings
**** Open link in browser
#+begin_src emacs-lisp
  (evil-leader/set-key
    "o l" 'org-open-at-point)
#+end_src
**** Timestamp
#+begin_src emacs-lisp
  (defun insert-timestamp ()
    "Prompt for timestamp and insert"
    (interactive)
    (org-time-stamp t))

  (evil-leader/set-key
    "o t" 'insert-timestamp)
#+end_src
* GTD
** Move item to inbox
#+begin_src emacs-lisp
  (defun my/send-to-inbox ()
    "Send selected text to inbox"
    (interactive)
    (let ((selected-text (my/grab-selected-text)))
      (if selected-text
	  (progn
	    (write-region selected-text nil "~/gtd/inbox.org" 'append)
	    (delete-region (region-beginning) (region-end)))
	(error "Error: No text selected"))))

  (evil-leader/set-key
    "s t i" 'my/send-to-inbox)
#+end_src
** Move item to projects
#+begin_src emacs-lisp
  (defun my/send-to-projects ()
    "Send selected text to projects"
    (interactive)
    (let ((selected-text (my/grab-selected-text)))
      (if selected-text
	  (progn
	    (write-region selected-text nil "~/gtd/projects.org" 'append)
	    (delete-region (region-beginning) (region-end)))
	(error "Error: No text selected"))))

  (evil-leader/set-key
    "s t p" 'my/send-to-projects)
#+end_src
** Move item to someday
#+begin_src emacs-lisp
  (defun my/send-to-someday ()
    "Send selected text to someday"
    (interactive)
    (let ((selected-text (my/grab-selected-text)))
      (if selected-text
	  (progn
	    (write-region selected-text nil "~/gtd/someday.org" 'append)
	    (delete-region (region-beginning) (region-end)))
	(error "Error: No text selected"))))

  (evil-leader/set-key
    "s t s" 'my/send-to-someday)
#+end_src
** Open inbox
#+begin_src emacs-lisp
  (evil-leader/set-key
    "o i" (lambda () (interactive) (find-file "~/gtd/inbox.org")))
#+end_src
** Open projects
#+begin_src emacs-lisp
  (evil-leader/set-key
    "o p" (lambda () (interactive) (find-file "~/gtd/projects.org")))
#+end_src
* Abbreviations
** Python
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'abbrev-mode)

  (define-abbrev-table 'python-mode-abbrev-table
    '(("ifnem" "if __name__ == \"__main__\":")
      ("dinit" "def __init__(self):")))

  (setq save-abbrevs nil)
#+end_src
* Autocomplete
** Install Company
#+begin_src emacs-lisp
  (unless (package-installed-p 'company)
    (package-install 'company))

  (require 'company)

  (add-hook 'after-init-hook 'global-company-mode)
#+end_src
* RSS Reader
** Install Elfeed
#+begin_src emacs-lisp
  (unless (package-installed-p 'elfeed)
    (package-install 'elfeed))

  (require 'elfeed)
#+end_src
** Refresh Elfeed on open
#+begin_src emacs-lisp
  (advice-add 'elfeed :before #'elfeed-update)
#+end_src
** Feeds
#+begin_src emacs-lisp
  (setq elfeed-feeds
        '(("https://protesilaos.com/master.xml" emacs)
          ("https://hnrss.org/frontpage" hn)
          "https://sachachua.com/blog/feed/index.xml"
          "https://takeonrules.com/index.atom"
          "https://www.youtube.com/feeds/videos.xml?channel_id=UC3Vuq4Q1bKFtAiKYlwRv3oA" ;; Peter Santenello
          ))

  (elfeed-update)
#+end_src
* Terminal
** Install
#+begin_src emacs-lisp
  (unless (package-installed-p 'multi-term)
    (package-install 'multi-term))

  (require 'multi-term)
#+end_src
** Key Bindings
#+begin_src emacs-lisp
  (defun my/create-small-shell ()
    "Create a shell buffer in a window below current buffer."
    (interactive)
    (split-window-below)
    (other-window 1)
    (multi-term))

  (evil-leader/set-key
    "t s" 'my/create-small-shell
    "t t" 'multi-term)
#+end_src
* IDE
#+begin_src emacs-lisp
  (defun my/ide ()
    "Create python ide window configuration"
    (interactive)
    (let ((working-directory (read-directory-name "Working Directory: ")))
      (delete-other-windows)
      (cd working-directory)
      (neotree-dir default-directory)
      (other-window 1)))

  (evil-leader/set-key
    "i d e" 'my/ide)
#+end_src
* Web
** Key Bindings
*** Search Google
Search google for selected text
#+begin_src emacs-lisp
  (defun my/google-search ()
    "Use google search on selected text"
    (interactive)
    (let ((selected-text (my/grab-selected-text)))
      (if selected-text
	(browse-url (format "https://google.com/search?q=%s" (url-hexify-string selected-text)))
	(error "Error: No text selected to search"))))

  (evil-leader/set-key
    "g s" 'my/google-search)
#+end_src
* Programming
** Org Babel Languages
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
  (setq org-babel-python-command "python3")

  (org-babel-do-load-languages
   'org-babel-load-languages '((java . t)
			       (python . t)))
#+end_src
** Key Bindings
*** Toggle View Code Block
#+begin_src emacs-lisp
  (defun my/toggle-view-code-block()
    "Toggle narrowing on code block"
    (interactive)
    (if (buffer-narrowed-p)
	(widen)
    (narrow-to-defun)))

  (evil-leader/set-key
    "c v" 'my/toggle-view-code-block)
#+end_src
*** Evaluate expression
#+begin_src emacs-lisp
  (evil-leader/set-key
    "x" 'eval-last-sexp)
#+end_src
*** Python
#+begin_src emacs-lisp
  (defun my/run-file-as-python ()
    "Run the current file as a python script"
    (interactive)
    (let ((python-file-buffer-name (buffer-file-name))
	  (python-script-arguments (read-string "Arguments: ")))
      (shell-command (concat "python3 " python-file-buffer-name " " python-script-arguments) "*Python Output*")))

  (evil-leader/set-key-for-mode 'python-mode
    "r p" 'my/run-file-as-python)
#+end_src
*** Bash
#+begin_src emacs-lisp
  (defun my/run-file-as-bash ()
    "Run the current file as a bash script"
    (interactive)
    (let ((bash-file-buffer-name (buffer-file-name))
	  (bash-script-arguments (read-string "Arguments: ")))
      (shell-command (concat "export PATH=$PATH:~/bin && bash " bash-file-buffer-name " " bash-script-arguments) "*Bash Output*")))

  (evil-leader/set-key-for-mode 'sh-mode
    "r b" 'my/run-file-as-bash)
#+end_src
* Roleplaying
** Tools
#+begin_src emacs-lisp
  (load-file "~/.emacs.d/dnd.el")

  (evil-leader/set-key
    "d n" 'dnd/print-npc
    "d k" 'dnd/print-keywords
    "d r" 'dnd/print-roll
    "d o" 'dnd/print-oracle
    "d e" 'dnd/print-event
    "d c" 'dnd/print-combat)

  (evil-leader/set-key
    "d i n" 'dnd/insert-npc
    "d i u" 'dnd/insert-urban
    "d i k" 'dnd/insert-keywords
    "d i r" 'dnd/insert-roll
    "d i o" 'dnd/insert-oracle
    "d i e" 'dnd/insert-event
    "d i c" 'dnd/insert-combat)
#+end_src
* Fuzzy Matching
** Install
#+begin_src emacs-lisp
  (unless (package-installed-p 'orderless)
    (package-install 'orderless))

  (require 'orderless)

  (setq completion-styles '(orderless basic)
	completion-category-overrides '((file (styles basic partial-completion))))
#+end_src
* Consult (Completions with Previews)
** Install
#+begin_src emacs-lisp
  (unless (package-installed-p 'consult)
    (package-install 'consult))

  (require 'consult)
#+end_src
* Evil Mode
** Install
#+begin_src emacs-lisp
  (setq evil-want-keybinding nil)

  (unless (package-installed-p 'evil)
    (package-install 'evil))

  (setq evil-want-C-i-jump nil)

  (require 'evil)

  (evil-mode 1)
#+end_src
** Activate redo
#+begin_src emacs-lisp
  (evil-set-undo-system 'undo-redo)
#+end_src
** Evil collection
#+begin_src emacs-lisp
  (unless (package-installed-p 'evil-collection)
    (package-install 'evil-collection))

  (require 'evil-collection)
  (evil-collection-init '(neotree help))
#+end_src
** Disable RET key
This is so RET key can be used in org mode to follow links
#+begin_src emacs-lisp
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "RET") nil))
#+end_src
** Key bindings
*** Scrolling up
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
#+end_src
*** Save file
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "ZS") (lambda () (interactive) (save-buffer)))
#+end_src
*** Org mode
**** Open org accordians
#+begin_src emacs-lisp
  (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
#+end_src
*** Paste
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "M-v") 'yank)
  (define-key evil-insert-state-map (kbd "M-v") 'yank)
#+end_src
*** Elfeed
#+begin_src emacs-lisp
  (evil-define-key 'normal elfeed-search-mode-map (kbd "u") #'elfeed-search-tag-all-unread)
  (evil-define-key 'normal elfeed-search-mode-map (kbd "r") #'elfeed-search-untag-all-unread)
  (evil-define-key 'normal elfeed-search-mode-map (kbd "q") #'elfeed-kill-buffer)
  (evil-define-key 'normal elfeed-search-mode-map (kbd "<RET>") #'elfeed-search-show-entry) 

  (evil-define-key 'normal elfeed-search-mode-map (kbd "s") #'elfeed-search-set-filter)
  (evil-define-key 'normal elfeed-search-mode-map (kbd "S") #'elfeed-search-clear-filter)

  (evil-define-key 'normal elfeed-show-mode-map (kbd "q") #'elfeed-kill-buffer)
  (evil-define-key 'normal elfeed-show-mode-map (kbd "<tab>") #'elfeed-show-next-link)
#+end_src
*** Xref
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "gr") 'xref-find-references)
  (evil-define-key 'normal xref--xref-buffer-mode-map (kbd "<RET>") #'xref-goto-xref)
#+end_src
* Which Key (Key Binding Suggestions)
#+begin_src emacs-lisp
  (unless (package-installed-p 'which-key)
    (package-install 'which-key))

  (require 'which-key)
  (which-key-mode 1)
#+end_src
* Vertico (List Suggestions)
** Install
#+begin_src emacs-lisp
  (unless (package-installed-p 'vertico)
    (package-install 'vertico))

  (require 'vertico)
  (vertico-mode 1)
#+end_src
** Cycle results
#+begin_src emacs-lisp
  (setq vertico-cycle 1)
#+end_src
* Marginalia (Suggestion Hints)
#+begin_src emacs-lisp
  (unless (package-installed-p 'marginalia)
    (package-install 'marginalia))

  (require 'marginalia)
  (marginalia-mode 1)
#+end_src
